

http://balau82.wordpress.com/2010/02/28/hello-world-for-bare-metal-arm-using-qemu/
Hello world for bare metal ARM using QEMU
Posted on 2010/02/28


The QEMU emulator supports the VersatilePB platform, that contains 
an ARM926EJ-S core and, among other peripherals, four UART serial ports; 
the first serial port in particular (UART0) works  as a terminal when 
using the -nographic or “-serial stdio” qemu option. The memory map 
of the VersatilePB board is implemented in QEMU in this board-specific 
C source (at qemu.git/tree/hw/versatilepb.c); from that I note the 
address where the UART0 is mapped: 0x101f1000. The code that emulates 
the serial port inside QEMU (here in the source repository at hw/pl011.c) 
implements a subset of the functionalities of the PL011 Prime Cell UART 
from ARM; there is a useful technical manual from the ARM info center 
that describes how to interact with the hardware. In details, there 
is a register (UARTDR) that is used to transmit (when writing in 
the register) and receive (when reading) bytes; this register 
is placed at offset 0x0, so I need to read and write at the beginning 
of the memory allocated for the UART0.

The QEMU emulator is written especially to emulate Linux guest systems; 
for this reason its startup procedure is implemented specifically: 
the -kernel option loads a binary file (usually a Linux kernel) 
inside the system memory starting at address 0x00010000. The emulator 
starts the execution at address 0x00000000, where few instructions 
(already in place) are used to jump at the beginning of the kernel image. 
The interrupt table of ARM cores, usually placed at address 0x00000000, 
is not present, and the peripheral interrupts are disabled at startup, 
as needed to boot a Linux kernel. Knowing this, to implement a working 
emulation I need to considerate a few things:

    The software must be compiled and linked to be placed at 0x00010000
    I need to create a binary image of our program
    I can ignore interrupt handling for now


Build:

 $ arm-none-eabi-as -mcpu=arm926ej-s -g startup.s -o startup.o
 $ arm-none-eabi-gcc -c -mcpu=arm926ej-s -g test.c -o test.o
 $ arm-none-eabi-ld -T test.ld test.o startup.o -o test.elf
 $ arm-none-eabi-objcopy -O binary test.elf test.bin


Qemu run: use "ctrl-a" then "x" to quit:

 $ qemu-system-arm -M versatilepb -m 128M -nographic -kernel test.bin


Qemu run: wait on tcp 1234 port:

 $ qemu-system-arm -M versatilepb -m 128M -nographic -s -S -kernel test.bin


Debug with gdb: continue with "continue" etc:

 target remote localhost:1234
 file test.elf


