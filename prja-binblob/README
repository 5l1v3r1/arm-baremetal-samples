
http://balau82.wordpress.com/2012/02/19/linking-a-binary-blob-with-gcc/
Linking a binary blob with GCC
Posted on 2012/02/19


Create a data file:

 $ dd if=/dev/urandom of=blob.bin bs=1 count=16
 $ hexdump -C blob.bin
 00000000  2a 3b cb 0f 43 66 56 77  fd cc 5a e9 b9 73 a7 b2  |*;..CfVw..Z..s..|


Create an obj file:

 $ objcopy -I binary -O <target_format> -B <target_architecture> <binary_file> <object_file>

 $ > arch.c
 $ gcc -c arch.c -o arch.o
 $ objdump -f arch.o
  
 arch.o:     file format elf32-i386
 architecture: i386, flags 0x00000010:
 HAS_SYMS
 start address 0x00000000
  
 $ rm -f arch.c arch.o

 $ objcopy -I binary -O elf32-i386 -B i386 blob.bin blob.o


The symbols in the obj file:

 $ objdump -t blob.o
  
 blob.o:     file format elf32-i386
  
 SYMBOL TABLE:
 00000000 l    d  .data    00000000 .data
 00000000 g       .data    00000000 _binary_blob_bin_start
 00000010 g       .data    00000000 _binary_blob_bin_end
 00000010 g       *ABS*    00000000 _binary_blob_bin_size


The test.c

 #include <stdio.h>
 extern unsigned char _binary_blob_bin_start;
 extern unsigned char _binary_blob_bin_end;
 extern unsigned char _binary_blob_bin_size;
 int main()
 {
  unsigned char *pblob = &_binary_blob_bin_start;
  while(pblob < &_binary_blob_bin_end)
  {
    printf("%d: %02X\n", pblob - &_binary_blob_bin_start, *pblob);
    pblob++;
  }
  printf("size: %d\n", &_binary_blob_bin_size);
 
  return 0;
 }


Compile

 $ gcc    -c -o test_blob.o test_blob.c
 $ gcc   test_blob.o blob.o   -o test_blob


It is also possible to rename the symbols that are created by objcopy 
using the “--redefine-sym” option, and also put the data in a section 
with a different name and different flags, using “--rename-section“.


