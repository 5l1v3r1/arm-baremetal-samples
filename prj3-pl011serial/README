

http://balau82.wordpress.com/2010/11/30/emulating-arm-pl011-serial-ports/
Emulating ARM PL011 serial ports
Posted on 2010/11/30


QEMU is able to emulate ARM systems with multiple serial ports, 
for example the Versatile PB. It has the ability to direct them to 
many types of host resources such as standard I/O, a pseudo-terminal 
or a telnet port. I started from my hello world example for 
bare-metal ARM programs to control three different serial ports. 
In the Versatile PB manual there’s a section, called Memory Map, 
that includes the absolute addresses of the mapped peripherals. 
For example, the UART 0, 1 and 2 interfaces are placed at addresses 
0x101F1000, 0x101F2000 and 0x101F3000 respectively. Inside the manual, 
the programmer’s model for the UART peripherals indicates the ARM 
PrimeCell UART (PL011) Technical Reference Manual as reference. 
In the PL011 manual we can find a detailed description of the UART 
memory mapped registers. From that decription I implemented a C struct 
that renders easy to use the serial ports. 

The code test.c:

The pl011_T structure implements the memory map of the PL011 serial port. 
I used the standard sized types that are defined inside “stdint.h” 
because the important part of the definition is to put the register 
at the right offset from the start of the struct. The purpose of the 
reserved byte arrays is to put the subsequent register at the right 
offset as specified in the PL011 manual. The definition is marked 
as volatile because I don’t want that the compiler assumes something 
about the values of the registers, because they can be changed by 
the hardware. Some registers are marked const because they are 
read-only, but the volatile specifier indicates that they can 
actually change outside the execution of the program. At last, 
the three pointers UART0, UART1 and UART2 are pointing to the 
address where the peripheral is mapped in the Versatile platform. 
The code itself does nothing more than echoing the received character, 
and if the character is a letter it converts it to uppercase. 
The echo is done polling the RXFE flag of the Flag Register (FR) 
until the receive FIFO is not empty. Then, we wait until the transmit 
FIFO is not full (TXFF flag) and use the Data Register to read 
and write the byte.

Use the same "startup.s" and "test.ld" as last sample.


Build:

 $ arm-none-eabi-gcc -c -mcpu=arm926ej-s test.c -o test.o
 $ arm-none-eabi-as -mcpu=arm926ej-s startup.s -o startup.o
 $ arm-none-eabi-ld -T test.ld test.o startup.o -o test.elf
 $ arm-none-eabi-objcopy -O binary test.elf test.bin


Run:

 $ qemu-system-arm -M versatilepb -m 128M -kernel test.bin \
   -serial stdio -serial telnet:localhost:1235,server \
   -serial telnet:localhost:1236,server
 QEMU waiting for connection on: telnet:127.0.0.1:1235,server
 QEMU waiting for connection on: telnet:127.0.0.1:1236,server


Connect:
 $ telnet 127.0.0.1 1235
 $ telnet 127.0.0.1 1236


References:
http://infocenter.arm.com/help/topic/com.arm.doc.dui0224i/DUI0224I_realview_platform_baseboard_for_arm926ej_s_ug.pdf
http://infocenter.arm.com/help/topic/com.arm.doc.ddi0183f/DDI0183.pdf


