

http://balau82.wordpress.com/2010/02/14/simplest-bare-metal-program-for-arm/
Simplese bare metal program for ARM
Posted on 2010/02/14


Using tools at ~/CodeSourcery/CodeSourcery_G++_Lite/bin 


The ARM9 architecture begins to execute code at a determined address, 
that could be 0 (usually allocated to RAM) or 0xFFFF0000 (usually 
allocated to Read Only Memory). We must put some special code at that 
particular address: the interrupt vector table. It is a series of 
32-bit instructions that are executed when something special happens: 
for example when the ARM core is reset, or when the memory contains 
an unknown instruction that doesnâ€™t belong to the ARM instruction set, 
or when a peripheral generates an interrupt (the serial port received 
a byte). The instructions in the interrupt vector table usually make 
the processor jump to the code that handles the event. The jump can 
be done with a branch instruction (B in ARM assembly) when the 
destination address is near.


Build:

 arm-none-eabi-gcc -c -mcpu=arm926ej-s -g test.c -o test.o
 arm-none-eabi-as -mcpu=arm926ej-s -g startup.s -o startup.o
 arm-none-eabi-ld -T test.ld test.o startup.o -o test.elf


Simulated debug:

  $ arm-none-eabi-gdb test.elf
  [...]
  This GDB was configured as "--host=i686-pc-linux-gnu --target=arm-none-eabi".
  [...]
  (gdb) target sim
  Connected to the simulator.
  (gdb) load
  Loading section .text, size 0x50 vma 0x0
  Start address 0x0
  Transfer rate: 640 bits in <1 sec.
  (gdb) break c_entry
  Breakpoint 1 at 0x3c: file test.c, line 24.
  (gdb) run
  Starting program: /home/francesco/src/arm-none-eabi/startup/test.elf 
  
  Breakpoint 1, c_entry () at test.c:24
  24        return 0;
  (gdb) set $pc=0
  (gdb) stepi
  Reset_Handler () at startup.s:34
  34        LDR sp, =stack_top


Or debug with ddd frontend:

  $ ddd --debugger arm-none-eabi-gdb test.elf


